// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: communicate/driver.proto

package communicate

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Driver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Image   string `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	IdCarry int64  `protobuf:"varint,4,opt,name=idCarry,proto3" json:"idCarry,omitempty"`
	IdTruck int64  `protobuf:"varint,5,opt,name=idTruck,proto3" json:"idTruck,omitempty"`
}

func (x *Driver) Reset() {
	*x = Driver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_communicate_driver_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Driver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Driver) ProtoMessage() {}

func (x *Driver) ProtoReflect() protoreflect.Message {
	mi := &file_communicate_driver_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Driver.ProtoReflect.Descriptor instead.
func (*Driver) Descriptor() ([]byte, []int) {
	return file_communicate_driver_proto_rawDescGZIP(), []int{0}
}

func (x *Driver) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Driver) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Driver) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Driver) GetIdCarry() int64 {
	if x != nil {
		return x.IdCarry
	}
	return 0
}

func (x *Driver) GetIdTruck() int64 {
	if x != nil {
		return x.IdTruck
	}
	return 0
}

type DataDriver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Driver []*Driver `protobuf:"bytes,1,rep,name=driver,proto3" json:"driver,omitempty"`
}

func (x *DataDriver) Reset() {
	*x = DataDriver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_communicate_driver_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataDriver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataDriver) ProtoMessage() {}

func (x *DataDriver) ProtoReflect() protoreflect.Message {
	mi := &file_communicate_driver_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataDriver.ProtoReflect.Descriptor instead.
func (*DataDriver) Descriptor() ([]byte, []int) {
	return file_communicate_driver_proto_rawDescGZIP(), []int{1}
}

func (x *DataDriver) GetDriver() []*Driver {
	if x != nil {
		return x.Driver
	}
	return nil
}

type DriverListAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page    int64  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Limit   int64  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Name    string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	IdCarry int64  `protobuf:"varint,4,opt,name=idCarry,proto3" json:"idCarry,omitempty"`
}

func (x *DriverListAllRequest) Reset() {
	*x = DriverListAllRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_communicate_driver_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DriverListAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DriverListAllRequest) ProtoMessage() {}

func (x *DriverListAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_communicate_driver_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DriverListAllRequest.ProtoReflect.Descriptor instead.
func (*DriverListAllRequest) Descriptor() ([]byte, []int) {
	return file_communicate_driver_proto_rawDescGZIP(), []int{2}
}

func (x *DriverListAllRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *DriverListAllRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *DriverListAllRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DriverListAllRequest) GetIdCarry() int64 {
	if x != nil {
		return x.IdCarry
	}
	return 0
}

type DriverListAllResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  *DataDriver `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Page  int64       `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Limit int64       `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Total int64       `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *DriverListAllResponse) Reset() {
	*x = DriverListAllResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_communicate_driver_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DriverListAllResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DriverListAllResponse) ProtoMessage() {}

func (x *DriverListAllResponse) ProtoReflect() protoreflect.Message {
	mi := &file_communicate_driver_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DriverListAllResponse.ProtoReflect.Descriptor instead.
func (*DriverListAllResponse) Descriptor() ([]byte, []int) {
	return file_communicate_driver_proto_rawDescGZIP(), []int{3}
}

func (x *DriverListAllResponse) GetData() *DataDriver {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DriverListAllResponse) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *DriverListAllResponse) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *DriverListAllResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type CreateDriverRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Image   string `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	IdCarry int64  `protobuf:"varint,3,opt,name=idCarry,proto3" json:"idCarry,omitempty"`
	IdTruck int64  `protobuf:"varint,4,opt,name=idTruck,proto3" json:"idTruck,omitempty"`
}

func (x *CreateDriverRequest) Reset() {
	*x = CreateDriverRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_communicate_driver_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDriverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDriverRequest) ProtoMessage() {}

func (x *CreateDriverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_communicate_driver_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDriverRequest.ProtoReflect.Descriptor instead.
func (*CreateDriverRequest) Descriptor() ([]byte, []int) {
	return file_communicate_driver_proto_rawDescGZIP(), []int{4}
}

func (x *CreateDriverRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateDriverRequest) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *CreateDriverRequest) GetIdCarry() int64 {
	if x != nil {
		return x.IdCarry
	}
	return 0
}

func (x *CreateDriverRequest) GetIdTruck() int64 {
	if x != nil {
		return x.IdTruck
	}
	return 0
}

type CreateDriverResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Created bool `protobuf:"varint,1,opt,name=created,proto3" json:"created,omitempty"`
}

func (x *CreateDriverResponse) Reset() {
	*x = CreateDriverResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_communicate_driver_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDriverResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDriverResponse) ProtoMessage() {}

func (x *CreateDriverResponse) ProtoReflect() protoreflect.Message {
	mi := &file_communicate_driver_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDriverResponse.ProtoReflect.Descriptor instead.
func (*CreateDriverResponse) Descriptor() ([]byte, []int) {
	return file_communicate_driver_proto_rawDescGZIP(), []int{5}
}

func (x *CreateDriverResponse) GetCreated() bool {
	if x != nil {
		return x.Created
	}
	return false
}

type DeleteDriverByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteDriverByIdRequest) Reset() {
	*x = DeleteDriverByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_communicate_driver_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDriverByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDriverByIdRequest) ProtoMessage() {}

func (x *DeleteDriverByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_communicate_driver_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDriverByIdRequest.ProtoReflect.Descriptor instead.
func (*DeleteDriverByIdRequest) Descriptor() ([]byte, []int) {
	return file_communicate_driver_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteDriverByIdRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteDriverByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deleted bool `protobuf:"varint,1,opt,name=deleted,proto3" json:"deleted,omitempty"`
}

func (x *DeleteDriverByIdResponse) Reset() {
	*x = DeleteDriverByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_communicate_driver_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDriverByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDriverByIdResponse) ProtoMessage() {}

func (x *DeleteDriverByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_communicate_driver_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDriverByIdResponse.ProtoReflect.Descriptor instead.
func (*DeleteDriverByIdResponse) Descriptor() ([]byte, []int) {
	return file_communicate_driver_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteDriverByIdResponse) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

type UpdateDriverByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Image   string `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	IdCarry int64  `protobuf:"varint,4,opt,name=idCarry,proto3" json:"idCarry,omitempty"`
	IdTruck int64  `protobuf:"varint,5,opt,name=idTruck,proto3" json:"idTruck,omitempty"`
}

func (x *UpdateDriverByIdRequest) Reset() {
	*x = UpdateDriverByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_communicate_driver_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDriverByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDriverByIdRequest) ProtoMessage() {}

func (x *UpdateDriverByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_communicate_driver_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDriverByIdRequest.ProtoReflect.Descriptor instead.
func (*UpdateDriverByIdRequest) Descriptor() ([]byte, []int) {
	return file_communicate_driver_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateDriverByIdRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateDriverByIdRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateDriverByIdRequest) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *UpdateDriverByIdRequest) GetIdCarry() int64 {
	if x != nil {
		return x.IdCarry
	}
	return 0
}

func (x *UpdateDriverByIdRequest) GetIdTruck() int64 {
	if x != nil {
		return x.IdTruck
	}
	return 0
}

type UpdateDriverByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Updated bool `protobuf:"varint,1,opt,name=updated,proto3" json:"updated,omitempty"`
}

func (x *UpdateDriverByIdResponse) Reset() {
	*x = UpdateDriverByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_communicate_driver_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDriverByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDriverByIdResponse) ProtoMessage() {}

func (x *UpdateDriverByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_communicate_driver_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDriverByIdResponse.ProtoReflect.Descriptor instead.
func (*UpdateDriverByIdResponse) Descriptor() ([]byte, []int) {
	return file_communicate_driver_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateDriverByIdResponse) GetUpdated() bool {
	if x != nil {
		return x.Updated
	}
	return false
}

type ListOneDriverByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ListOneDriverByIdRequest) Reset() {
	*x = ListOneDriverByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_communicate_driver_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOneDriverByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOneDriverByIdRequest) ProtoMessage() {}

func (x *ListOneDriverByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_communicate_driver_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOneDriverByIdRequest.ProtoReflect.Descriptor instead.
func (*ListOneDriverByIdRequest) Descriptor() ([]byte, []int) {
	return file_communicate_driver_proto_rawDescGZIP(), []int{10}
}

func (x *ListOneDriverByIdRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ListOneDriverByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Driver *Driver `protobuf:"bytes,1,opt,name=driver,proto3" json:"driver,omitempty"`
}

func (x *ListOneDriverByIdResponse) Reset() {
	*x = ListOneDriverByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_communicate_driver_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOneDriverByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOneDriverByIdResponse) ProtoMessage() {}

func (x *ListOneDriverByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_communicate_driver_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOneDriverByIdResponse.ProtoReflect.Descriptor instead.
func (*ListOneDriverByIdResponse) Descriptor() ([]byte, []int) {
	return file_communicate_driver_proto_rawDescGZIP(), []int{11}
}

func (x *ListOneDriverByIdResponse) GetDriver() *Driver {
	if x != nil {
		return x.Driver
	}
	return nil
}

type ValidateDriverExistByNameAndIdCarryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	IdCarry int64  `protobuf:"varint,2,opt,name=idCarry,proto3" json:"idCarry,omitempty"`
}

func (x *ValidateDriverExistByNameAndIdCarryRequest) Reset() {
	*x = ValidateDriverExistByNameAndIdCarryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_communicate_driver_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateDriverExistByNameAndIdCarryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateDriverExistByNameAndIdCarryRequest) ProtoMessage() {}

func (x *ValidateDriverExistByNameAndIdCarryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_communicate_driver_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateDriverExistByNameAndIdCarryRequest.ProtoReflect.Descriptor instead.
func (*ValidateDriverExistByNameAndIdCarryRequest) Descriptor() ([]byte, []int) {
	return file_communicate_driver_proto_rawDescGZIP(), []int{12}
}

func (x *ValidateDriverExistByNameAndIdCarryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ValidateDriverExistByNameAndIdCarryRequest) GetIdCarry() int64 {
	if x != nil {
		return x.IdCarry
	}
	return 0
}

type ValidateDriverExistByNameAndIdCarryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Valid bool `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (x *ValidateDriverExistByNameAndIdCarryResponse) Reset() {
	*x = ValidateDriverExistByNameAndIdCarryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_communicate_driver_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateDriverExistByNameAndIdCarryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateDriverExistByNameAndIdCarryResponse) ProtoMessage() {}

func (x *ValidateDriverExistByNameAndIdCarryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_communicate_driver_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateDriverExistByNameAndIdCarryResponse.ProtoReflect.Descriptor instead.
func (*ValidateDriverExistByNameAndIdCarryResponse) Descriptor() ([]byte, []int) {
	return file_communicate_driver_proto_rawDescGZIP(), []int{13}
}

func (x *ValidateDriverExistByNameAndIdCarryResponse) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

var File_communicate_driver_proto protoreflect.FileDescriptor

var file_communicate_driver_proto_rawDesc = []byte{
	0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x76, 0x0a, 0x06, 0x44, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x69, 0x64, 0x43, 0x61, 0x72, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x69, 0x64, 0x43, 0x61, 0x72, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x64, 0x54, 0x72,
	0x75, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x69, 0x64, 0x54, 0x72, 0x75,
	0x63, 0x6b, 0x22, 0x2d, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x12, 0x1f, 0x0a, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x07, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x52, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x22, 0x6e, 0x0a, 0x14, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x64, 0x43, 0x61, 0x72,
	0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x69, 0x64, 0x43, 0x61, 0x72, 0x72,
	0x79, 0x22, 0x78, 0x0a, 0x15, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x44,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x73, 0x0a, 0x13, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x69, 0x64, 0x43, 0x61, 0x72, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x69,
	0x64, 0x43, 0x61, 0x72, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x64, 0x54, 0x72, 0x75, 0x63,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x69, 0x64, 0x54, 0x72, 0x75, 0x63, 0x6b,
	0x22, 0x30, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x22, 0x29, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x34, 0x0a,
	0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x42, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x22, 0x87, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x64, 0x43,
	0x61, 0x72, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x69, 0x64, 0x43, 0x61,
	0x72, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x64, 0x54, 0x72, 0x75, 0x63, 0x6b, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x69, 0x64, 0x54, 0x72, 0x75, 0x63, 0x6b, 0x22, 0x34, 0x0a,
	0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x42, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x22, 0x2a, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x6e, 0x65, 0x44, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x3c, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x6e, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x06,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x44,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x52, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x22, 0x5a, 0x0a,
	0x2a, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x49, 0x64, 0x43,
	0x61, 0x72, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x69, 0x64, 0x43, 0x61, 0x72, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x69, 0x64, 0x43, 0x61, 0x72, 0x72, 0x79, 0x22, 0x43, 0x0a, 0x2b, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x49, 0x64, 0x43, 0x61, 0x72, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x32, 0xfd,
	0x03, 0x0a, 0x11, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x23, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x45, 0x78, 0x69, 0x73, 0x74, 0x42, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x41, 0x6e, 0x64, 0x49, 0x64, 0x43, 0x61, 0x72, 0x72, 0x79, 0x12, 0x2b, 0x2e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x49, 0x64, 0x43, 0x61, 0x72,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x45, 0x78, 0x69, 0x73, 0x74, 0x42,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x49, 0x64, 0x43, 0x61, 0x72, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0d, 0x44, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x15, 0x2e, 0x44, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x14, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x15, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x11, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x6e, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x12,
	0x19, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x6e, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x42,
	0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x6e, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x12, 0x18, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x12, 0x18, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x19, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0e,
	0x5a, 0x0c, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x65, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_communicate_driver_proto_rawDescOnce sync.Once
	file_communicate_driver_proto_rawDescData = file_communicate_driver_proto_rawDesc
)

func file_communicate_driver_proto_rawDescGZIP() []byte {
	file_communicate_driver_proto_rawDescOnce.Do(func() {
		file_communicate_driver_proto_rawDescData = protoimpl.X.CompressGZIP(file_communicate_driver_proto_rawDescData)
	})
	return file_communicate_driver_proto_rawDescData
}

var file_communicate_driver_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_communicate_driver_proto_goTypes = []interface{}{
	(*Driver)(nil),                                      // 0: Driver
	(*DataDriver)(nil),                                  // 1: DataDriver
	(*DriverListAllRequest)(nil),                        // 2: DriverListAllRequest
	(*DriverListAllResponse)(nil),                       // 3: DriverListAllResponse
	(*CreateDriverRequest)(nil),                         // 4: CreateDriverRequest
	(*CreateDriverResponse)(nil),                        // 5: CreateDriverResponse
	(*DeleteDriverByIdRequest)(nil),                     // 6: DeleteDriverByIdRequest
	(*DeleteDriverByIdResponse)(nil),                    // 7: DeleteDriverByIdResponse
	(*UpdateDriverByIdRequest)(nil),                     // 8: UpdateDriverByIdRequest
	(*UpdateDriverByIdResponse)(nil),                    // 9: UpdateDriverByIdResponse
	(*ListOneDriverByIdRequest)(nil),                    // 10: ListOneDriverByIdRequest
	(*ListOneDriverByIdResponse)(nil),                   // 11: ListOneDriverByIdResponse
	(*ValidateDriverExistByNameAndIdCarryRequest)(nil),  // 12: ValidateDriverExistByNameAndIdCarryRequest
	(*ValidateDriverExistByNameAndIdCarryResponse)(nil), // 13: ValidateDriverExistByNameAndIdCarryResponse
}
var file_communicate_driver_proto_depIdxs = []int32{
	0,  // 0: DataDriver.driver:type_name -> Driver
	1,  // 1: DriverListAllResponse.data:type_name -> DataDriver
	0,  // 2: ListOneDriverByIdResponse.driver:type_name -> Driver
	12, // 3: DriverCommunicate.ValidateDriverExistByNameAndIdCarry:input_type -> ValidateDriverExistByNameAndIdCarryRequest
	2,  // 4: DriverCommunicate.DriverListAll:input_type -> DriverListAllRequest
	4,  // 5: DriverCommunicate.CreateDriver:input_type -> CreateDriverRequest
	10, // 6: DriverCommunicate.ListOneDriverById:input_type -> ListOneDriverByIdRequest
	8,  // 7: DriverCommunicate.UpdateDriverById:input_type -> UpdateDriverByIdRequest
	6,  // 8: DriverCommunicate.DeleteDriverById:input_type -> DeleteDriverByIdRequest
	13, // 9: DriverCommunicate.ValidateDriverExistByNameAndIdCarry:output_type -> ValidateDriverExistByNameAndIdCarryResponse
	3,  // 10: DriverCommunicate.DriverListAll:output_type -> DriverListAllResponse
	5,  // 11: DriverCommunicate.CreateDriver:output_type -> CreateDriverResponse
	11, // 12: DriverCommunicate.ListOneDriverById:output_type -> ListOneDriverByIdResponse
	9,  // 13: DriverCommunicate.UpdateDriverById:output_type -> UpdateDriverByIdResponse
	7,  // 14: DriverCommunicate.DeleteDriverById:output_type -> DeleteDriverByIdResponse
	9,  // [9:15] is the sub-list for method output_type
	3,  // [3:9] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_communicate_driver_proto_init() }
func file_communicate_driver_proto_init() {
	if File_communicate_driver_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_communicate_driver_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Driver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_communicate_driver_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataDriver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_communicate_driver_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DriverListAllRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_communicate_driver_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DriverListAllResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_communicate_driver_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDriverRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_communicate_driver_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDriverResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_communicate_driver_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDriverByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_communicate_driver_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDriverByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_communicate_driver_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDriverByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_communicate_driver_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDriverByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_communicate_driver_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOneDriverByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_communicate_driver_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOneDriverByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_communicate_driver_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateDriverExistByNameAndIdCarryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_communicate_driver_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateDriverExistByNameAndIdCarryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_communicate_driver_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_communicate_driver_proto_goTypes,
		DependencyIndexes: file_communicate_driver_proto_depIdxs,
		MessageInfos:      file_communicate_driver_proto_msgTypes,
	}.Build()
	File_communicate_driver_proto = out.File
	file_communicate_driver_proto_rawDesc = nil
	file_communicate_driver_proto_goTypes = nil
	file_communicate_driver_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DriverCommunicateClient is the client API for DriverCommunicate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DriverCommunicateClient interface {
	ValidateDriverExistByNameAndIdCarry(ctx context.Context, in *ValidateDriverExistByNameAndIdCarryRequest, opts ...grpc.CallOption) (*ValidateDriverExistByNameAndIdCarryResponse, error)
	DriverListAll(ctx context.Context, in *DriverListAllRequest, opts ...grpc.CallOption) (*DriverListAllResponse, error)
	CreateDriver(ctx context.Context, in *CreateDriverRequest, opts ...grpc.CallOption) (*CreateDriverResponse, error)
	ListOneDriverById(ctx context.Context, in *ListOneDriverByIdRequest, opts ...grpc.CallOption) (*ListOneDriverByIdResponse, error)
	UpdateDriverById(ctx context.Context, in *UpdateDriverByIdRequest, opts ...grpc.CallOption) (*UpdateDriverByIdResponse, error)
	DeleteDriverById(ctx context.Context, in *DeleteDriverByIdRequest, opts ...grpc.CallOption) (*DeleteDriverByIdResponse, error)
}

type driverCommunicateClient struct {
	cc grpc.ClientConnInterface
}

func NewDriverCommunicateClient(cc grpc.ClientConnInterface) DriverCommunicateClient {
	return &driverCommunicateClient{cc}
}

func (c *driverCommunicateClient) ValidateDriverExistByNameAndIdCarry(ctx context.Context, in *ValidateDriverExistByNameAndIdCarryRequest, opts ...grpc.CallOption) (*ValidateDriverExistByNameAndIdCarryResponse, error) {
	out := new(ValidateDriverExistByNameAndIdCarryResponse)
	err := c.cc.Invoke(ctx, "/DriverCommunicate/ValidateDriverExistByNameAndIdCarry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverCommunicateClient) DriverListAll(ctx context.Context, in *DriverListAllRequest, opts ...grpc.CallOption) (*DriverListAllResponse, error) {
	out := new(DriverListAllResponse)
	err := c.cc.Invoke(ctx, "/DriverCommunicate/DriverListAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverCommunicateClient) CreateDriver(ctx context.Context, in *CreateDriverRequest, opts ...grpc.CallOption) (*CreateDriverResponse, error) {
	out := new(CreateDriverResponse)
	err := c.cc.Invoke(ctx, "/DriverCommunicate/CreateDriver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverCommunicateClient) ListOneDriverById(ctx context.Context, in *ListOneDriverByIdRequest, opts ...grpc.CallOption) (*ListOneDriverByIdResponse, error) {
	out := new(ListOneDriverByIdResponse)
	err := c.cc.Invoke(ctx, "/DriverCommunicate/ListOneDriverById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverCommunicateClient) UpdateDriverById(ctx context.Context, in *UpdateDriverByIdRequest, opts ...grpc.CallOption) (*UpdateDriverByIdResponse, error) {
	out := new(UpdateDriverByIdResponse)
	err := c.cc.Invoke(ctx, "/DriverCommunicate/UpdateDriverById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverCommunicateClient) DeleteDriverById(ctx context.Context, in *DeleteDriverByIdRequest, opts ...grpc.CallOption) (*DeleteDriverByIdResponse, error) {
	out := new(DeleteDriverByIdResponse)
	err := c.cc.Invoke(ctx, "/DriverCommunicate/DeleteDriverById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DriverCommunicateServer is the server API for DriverCommunicate service.
type DriverCommunicateServer interface {
	ValidateDriverExistByNameAndIdCarry(context.Context, *ValidateDriverExistByNameAndIdCarryRequest) (*ValidateDriverExistByNameAndIdCarryResponse, error)
	DriverListAll(context.Context, *DriverListAllRequest) (*DriverListAllResponse, error)
	CreateDriver(context.Context, *CreateDriverRequest) (*CreateDriverResponse, error)
	ListOneDriverById(context.Context, *ListOneDriverByIdRequest) (*ListOneDriverByIdResponse, error)
	UpdateDriverById(context.Context, *UpdateDriverByIdRequest) (*UpdateDriverByIdResponse, error)
	DeleteDriverById(context.Context, *DeleteDriverByIdRequest) (*DeleteDriverByIdResponse, error)
}

// UnimplementedDriverCommunicateServer can be embedded to have forward compatible implementations.
type UnimplementedDriverCommunicateServer struct {
}

func (*UnimplementedDriverCommunicateServer) ValidateDriverExistByNameAndIdCarry(context.Context, *ValidateDriverExistByNameAndIdCarryRequest) (*ValidateDriverExistByNameAndIdCarryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateDriverExistByNameAndIdCarry not implemented")
}
func (*UnimplementedDriverCommunicateServer) DriverListAll(context.Context, *DriverListAllRequest) (*DriverListAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DriverListAll not implemented")
}
func (*UnimplementedDriverCommunicateServer) CreateDriver(context.Context, *CreateDriverRequest) (*CreateDriverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDriver not implemented")
}
func (*UnimplementedDriverCommunicateServer) ListOneDriverById(context.Context, *ListOneDriverByIdRequest) (*ListOneDriverByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOneDriverById not implemented")
}
func (*UnimplementedDriverCommunicateServer) UpdateDriverById(context.Context, *UpdateDriverByIdRequest) (*UpdateDriverByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDriverById not implemented")
}
func (*UnimplementedDriverCommunicateServer) DeleteDriverById(context.Context, *DeleteDriverByIdRequest) (*DeleteDriverByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDriverById not implemented")
}

func RegisterDriverCommunicateServer(s *grpc.Server, srv DriverCommunicateServer) {
	s.RegisterService(&_DriverCommunicate_serviceDesc, srv)
}

func _DriverCommunicate_ValidateDriverExistByNameAndIdCarry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateDriverExistByNameAndIdCarryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverCommunicateServer).ValidateDriverExistByNameAndIdCarry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DriverCommunicate/ValidateDriverExistByNameAndIdCarry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverCommunicateServer).ValidateDriverExistByNameAndIdCarry(ctx, req.(*ValidateDriverExistByNameAndIdCarryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverCommunicate_DriverListAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DriverListAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverCommunicateServer).DriverListAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DriverCommunicate/DriverListAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverCommunicateServer).DriverListAll(ctx, req.(*DriverListAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverCommunicate_CreateDriver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDriverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverCommunicateServer).CreateDriver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DriverCommunicate/CreateDriver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverCommunicateServer).CreateDriver(ctx, req.(*CreateDriverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverCommunicate_ListOneDriverById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOneDriverByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverCommunicateServer).ListOneDriverById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DriverCommunicate/ListOneDriverById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverCommunicateServer).ListOneDriverById(ctx, req.(*ListOneDriverByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverCommunicate_UpdateDriverById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDriverByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverCommunicateServer).UpdateDriverById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DriverCommunicate/UpdateDriverById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverCommunicateServer).UpdateDriverById(ctx, req.(*UpdateDriverByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverCommunicate_DeleteDriverById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDriverByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverCommunicateServer).DeleteDriverById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DriverCommunicate/DeleteDriverById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverCommunicateServer).DeleteDriverById(ctx, req.(*DeleteDriverByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DriverCommunicate_serviceDesc = grpc.ServiceDesc{
	ServiceName: "DriverCommunicate",
	HandlerType: (*DriverCommunicateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidateDriverExistByNameAndIdCarry",
			Handler:    _DriverCommunicate_ValidateDriverExistByNameAndIdCarry_Handler,
		},
		{
			MethodName: "DriverListAll",
			Handler:    _DriverCommunicate_DriverListAll_Handler,
		},
		{
			MethodName: "CreateDriver",
			Handler:    _DriverCommunicate_CreateDriver_Handler,
		},
		{
			MethodName: "ListOneDriverById",
			Handler:    _DriverCommunicate_ListOneDriverById_Handler,
		},
		{
			MethodName: "UpdateDriverById",
			Handler:    _DriverCommunicate_UpdateDriverById_Handler,
		},
		{
			MethodName: "DeleteDriverById",
			Handler:    _DriverCommunicate_DeleteDriverById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "communicate/driver.proto",
}
